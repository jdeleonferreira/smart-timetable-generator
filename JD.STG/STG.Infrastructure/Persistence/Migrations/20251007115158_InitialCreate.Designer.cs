// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STG.Infrastructure.Persistence;

#nullable disable

namespace STG.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(StgDbContext))]
    [Migration("20251007115158_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("STG.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Blocks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Teacher")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TimetableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TimetableId");

                    b.ToTable("Assignments", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.CurriculumLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("WeeklyBlocks")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CurriculumLines", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MustBeDouble")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedsLab")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subjects")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Timetable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Timetables", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("STG.Domain.Entities.Timetable", null)
                        .WithMany("Assignments")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("STG.Domain.ValueObjects.TimeSlot", "Slot", b1 =>
                        {
                            b1.Property<Guid>("AssignmentId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Block")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Slot_Block");

                            b1.Property<int>("Day")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Slot_Day");

                            b1.HasKey("AssignmentId");

                            b1.HasIndex("Day", "Block")
                                .HasDatabaseName("IX_Assignments_Slot");

                            b1.ToTable("Assignments");

                            b1.WithOwner()
                                .HasForeignKey("AssignmentId");
                        });

                    b.Navigation("Slot")
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.Room", b =>
                {
                    b.OwnsOne("STG.Domain.ValueObjects.Tags", "Tags", b1 =>
                        {
                            b1.Property<Guid>("RoomId")
                                .HasColumnType("TEXT");

                            b1.HasKey("RoomId");

                            b1.ToTable("Rooms");

                            b1.ToJson("Tags");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.Navigation("Tags")
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.Timetable", b =>
                {
                    b.OwnsOne("STG.Domain.ValueObjects.WeekConfig", "WeekConfig", b1 =>
                        {
                            b1.Property<Guid>("TimetableId")
                                .HasColumnType("TEXT");

                            b1.HasKey("TimetableId");

                            b1.ToTable("Timetables");

                            b1.WithOwner()
                                .HasForeignKey("TimetableId");
                        });

                    b.Navigation("WeekConfig")
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.Timetable", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
