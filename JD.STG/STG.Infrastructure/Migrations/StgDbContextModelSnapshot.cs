// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STG.Infrastructure.Persistence;

#nullable disable

namespace STG.Infrastructure.Migrations
{
    [DbContext(typeof(StgDbContext))]
    partial class StgDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("STG.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolYearId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<byte>("WeeklyHours")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("GroupId", "SubjectId", "SchoolYearId")
                        .IsUnique();

                    b.ToTable("Assignment", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.AvailabilityBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("PeriodFrom")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeriodTo")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId", "DayOfWeek");

                    b.ToTable("AvailabilityBlocks", null, t =>
                        {
                            t.HasCheckConstraint("CK_AB_FromTo", "PeriodFrom >= 1 AND PeriodFrom <= 20 AND PeriodTo >= 1 AND PeriodTo <= 20 AND PeriodFrom <= PeriodTo");
                        });
                });

            modelBuilder.Entity("STG.Domain.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Order")
                        .IsUnique();

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GradeId", "Name")
                        .IsUnique();

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLab")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolYearId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId", "Name")
                        .IsUnique();

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.RunHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Conflicts")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogPointer")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("RequestedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolYearId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Score")
                        .HasColumnType("REAL");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId", "RequestedAt");

                    b.ToTable("RunHistories", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.SchedulingConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxConsecutiveSameSubject")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxPeriodsPerDayGroup")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxPeriodsPerDayTeacher")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrioritiesJson")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolYearId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId")
                        .IsUnique();

                    b.ToTable("SchedulingConfigs", null, t =>
                        {
                            t.HasCheckConstraint("CK_Sched_MaxConsecutive", "(MaxConsecutiveSameSubject IS NULL OR (MaxConsecutiveSameSubject BETWEEN 1 AND 10))");

                            t.HasCheckConstraint("CK_Sched_MaxPerGroup", "(MaxPeriodsPerDayGroup IS NULL OR (MaxPeriodsPerDayGroup BETWEEN 1 AND 20))");

                            t.HasCheckConstraint("CK_Sched_MaxPerTeacher", "(MaxPeriodsPerDayTeacher IS NULL OR (MaxPeriodsPerDayTeacher BETWEEN 1 AND 20))");
                        });
                });

            modelBuilder.Entity("STG.Domain.Entities.SchoolYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("SchoolYears", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.StudyArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte>("OrderNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StudyAreas", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.StudyPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolYearId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId")
                        .IsUnique();

                    b.ToTable("StudyPlans", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.StudyPlanEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudyPlanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("TEXT");

                    b.Property<byte>("WeeklyHours")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("StudyPlanId", "GradeId", "SubjectId")
                        .IsUnique();

                    b.ToTable("StudyPlanEntry", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsElective")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudyAreaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StudyAreaId");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.SubjectWeightProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("Effort")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Energy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Focus")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("GradeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId", "GradeId")
                        .IsUnique();

                    b.ToTable("SubjectWeightProfiles", null, t =>
                        {
                            t.HasCheckConstraint("CK_SWP_Effort", "Effort BETWEEN 0 AND 100");

                            t.HasCheckConstraint("CK_SWP_Energy", "Energy BETWEEN 0 AND 100");

                            t.HasCheckConstraint("CK_SWP_Focus", "Focus  BETWEEN 0 AND 100");
                        });
                });

            modelBuilder.Entity("STG.Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<byte?>("MaxWeeklyLoad")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Timetable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolYearId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("GroupId", "SchoolYearId")
                        .IsUnique();

                    b.ToTable("Timetable", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.TimetableEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<byte>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<byte>("PeriodIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Room")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Span")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TimetableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("TimetableId", "DayOfWeek", "PeriodIndex")
                        .IsUnique();

                    b.ToTable("TimetableEntry", (string)null);
                });

            modelBuilder.Entity("STG.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("STG.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STG.Domain.Entities.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STG.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STG.Domain.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Group");

                    b.Navigation("SchoolYear");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("STG.Domain.Entities.AvailabilityBlock", b =>
                {
                    b.HasOne("STG.Domain.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.Group", b =>
                {
                    b.HasOne("STG.Domain.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("STG.Domain.Entities.Room", b =>
                {
                    b.HasOne("STG.Domain.Entities.SchoolYear", null)
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.RunHistory", b =>
                {
                    b.HasOne("STG.Domain.Entities.SchoolYear", null)
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.SchedulingConfig", b =>
                {
                    b.HasOne("STG.Domain.Entities.SchoolYear", null)
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.StudyPlan", b =>
                {
                    b.HasOne("STG.Domain.Entities.SchoolYear", null)
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.StudyPlanEntry", b =>
                {
                    b.HasOne("STG.Domain.Entities.Grade", null)
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STG.Domain.Entities.StudyPlan", null)
                        .WithMany("Entries")
                        .HasForeignKey("StudyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STG.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.Subject", b =>
                {
                    b.HasOne("STG.Domain.Entities.StudyArea", "StudyArea")
                        .WithMany("Subjects")
                        .HasForeignKey("StudyAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudyArea");
                });

            modelBuilder.Entity("STG.Domain.Entities.SubjectWeightProfile", b =>
                {
                    b.HasOne("STG.Domain.Entities.Grade", null)
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("STG.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STG.Domain.Entities.Timetable", b =>
                {
                    b.HasOne("STG.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STG.Domain.Entities.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("STG.Domain.Entities.TimetableEntry", b =>
                {
                    b.HasOne("STG.Domain.Entities.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STG.Domain.Entities.Timetable", "Timetable")
                        .WithMany("Entries")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("STG.Domain.Entities.StudyArea", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("STG.Domain.Entities.StudyPlan", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("STG.Domain.Entities.Timetable", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
